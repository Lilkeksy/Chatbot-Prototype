<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LILKEKSY'S CHATBOT</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Jost:ital,wght@0,100..900;1,100..900&family=Sevillana&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/styles/main.css" />
</head>

<body>
    <nav class="glass-nav">
        <h1>---</h1>
    </nav>
    <div class="greeting-screen">
      <h1>Hello There</h1>
      <p>Quote of the day: <br>
        <% if (data) { %>
          "<%= data.quote %>" â€” <%= data.author %>
        <% } else { %>
          "No quote today. Reality said no."
        <% } %>
      </p>
    </div>
    
    <main>
        <div id="chat-box" placheolder="response will be logged here"></div>
      
        <form id="chat-form">
          <textarea id="user-input" name="message" rows="1" placeholder="Type Text here"></textarea>
          <input type="submit" value="OK" />
        </form>
      </main>

      
      <script src="https://cdn.jsdelivr.net/npm/dompurify@3.2.6/dist/purify.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/15.0.12/marked.min.js" integrity="sha512-rCQgmUulW6f6QegOvTntKKb5IAoxTpGVCdWqYjkXEpzAns6XUFs8NKVqWe+KQpctp/EoRSFSuykVputqknLYMg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
      
      <script>
        const form = document.getElementById("chat-form");
        const input = document.getElementById("user-input");
        const chatBox = document.getElementById("chat-box");
        const greeting = document.querySelector(".greeting-screen");
      
        input.addEventListener("keydown", function (e) {
          if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            form.requestSubmit();
          }
        });
      
        input.addEventListener("input", () => {
          input.style.height = "auto";
          input.style.height = Math.min(input.scrollHeight, 150) + "px";
        });
      
        function typeMarkdownWithFormatting(markdown, container) {
  const html = DOMPurify.sanitize(marked.parse(markdown));
  const temp = document.createElement("div");
  temp.innerHTML = html;

  const prefix = document.createElement("strong");
  prefix.textContent = "SDRC:";
  container.appendChild(prefix);
  container.appendChild(document.createElement("br"));

  function typeNode(node, parent, cb) {
    if (node.nodeType === Node.TEXT_NODE) {
      const text = node.textContent;
      let i = 0;
      const interval = setInterval(() => {
        if (i >= text.length) {
          clearInterval(interval);
          cb();
          return;
        }
        parent.appendChild(document.createTextNode(text[i++]));
        chatBox.scrollTop = chatBox.scrollHeight;
      }, 15);
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      const el = document.createElement(node.tagName);
      for (const attr of node.attributes) {
        el.setAttribute(attr.name, attr.value);
      }
      parent.appendChild(el);

      const children = Array.from(node.childNodes);
      let idx = 0;

      function nextChild() {
        if (idx < children.length) {
          typeNode(children[idx++], el, nextChild);
        } else {
          cb();
        }
      }

      nextChild();
    } else {
      cb();
    }
  }

  const nodes = Array.from(temp.childNodes);
  let idx = 0;
  function nextBlock() {
    if (idx < nodes.length) {
      typeNode(nodes[idx++], container, nextBlock);
    }
  }

  nextBlock();
}

      
        form.addEventListener("submit", async (e) => {
          e.preventDefault();
          const message = input.value.trim();
          if (!message) return;
      
          if (greeting) greeting.style.display = "none";
      
          const userDiv = document.createElement("div");
          userDiv.className = "user-message";
          userDiv.textContent = `You: ${message}`;
          chatBox.appendChild(userDiv);
      
          input.value = "";
          input.style.height = "auto";
      
          try {
            const res = await fetch("/submit", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ message }),
            });
      
            const data = await res.json();
      
            const botDiv = document.createElement("div");
            botDiv.className = "bot-message";
            chatBox.appendChild(botDiv);
      
            typeMarkdownWithFormatting(data.reply, botDiv);
          } catch (err) {
            const errDiv = document.createElement("div");
            errDiv.className = "error-message";
            errDiv.textContent = "Error getting reply";
            chatBox.appendChild(errDiv);
            console.error(err);
          }
        });
      </script>
</body>

</html>